# SPDX-FileCopyrightText: Copyright (c) 2023-2025 Objectionary.com
# SPDX-License-Identifier: MIT
---
# yamllint disable rule:line-length
name: object-filter-to-distill
pattern: |
  ⟦
    φ ↦ Φ.hone.filter,
    opcode ↦ 𝑒-opcode,
    class ↦ 𝑒-class,
    target-handle ↦ 𝑒-target-handle,
    target-class ↦ 𝑒-target-class,
    target-method ↦ 𝑒-target-method,
    target-signature ↦ 𝑒-target-signature,
    bridge-input ↦ 𝑒-bridge-input
  ⟧
result: |
  ⟦
    φ ↦ Φ.hone.distill,
    class ↦ 𝑒-class,
    bridge-input ↦ 𝑒-bridge-input,
    bridge-output ↦ 𝑒-bridge-input,
    body ↦ ⟦
      i-dup ↦ ⟦
        φ ↦ Φ.jeo.opcode.dup
      ⟧,
      i1 ↦ ⟦
        φ ↦ Φ.jeo.opcode.𝜏-opcode,
        i2 ↦ 𝑒-target-class,
        i3 ↦ 𝑒-target-method,
        i4 ↦ 𝑒-target-signature,
        i5 ↦ Φ̇.false
      ⟧,
      i2 ↦ ⟦
        φ ↦ Φ.jeo.opcode.invokevirtual,
        i1 ↦ "java/lang/Boolean",
        i2 ↦ "booleanValue",
        i3 ↦ "()Z",
        i4 ↦ Φ̇.false
      ⟧,
      i3 ↦ ⟦
        φ ↦ Φ.jeo.opcode.ifne,
        i2 ↦ ⟦
          φ ↦ Φ.jeo.label,
          i1 ↦ 𝑒-label
        ⟧
      ⟧,
      i4 ↦ ⟦
        φ ↦ Φ.jeo.opcode.return
      ⟧,
      i5 ↦ ⟦
        φ ↦ Φ.jeo.label,
        i1 ↦ 𝑒-label
      ⟧,
      i6 ↦ ⟦
        φ ↦ Φ.jeo.frame,
        type ↦ 4,
        nlocal ↦ 0,
        locals ↦ ⟦ φ ↦ Φ.jeo.seq.of0 ⟧,
        nstack ↦ 1,
        stack ↦ ⟦
          φ ↦ Φ.jeo.seq.of1,
          item ↦ 𝑒-item-type
        ⟧
      ⟧
    ⟧
  ⟧
when:
  matches:
    - '.+\)Ljava\/lang\/Boolean'
    - 𝑒-target-signature  
where:
  - meta: 𝑒-label
    function: random-string
    args: ['"L%d"']
  - meta: 𝜏-opcode
    function: tau
    args: [𝑒-opcode]
  - meta: 𝑒-item-type
    function: sed
    args:
      - 𝑒-bridge-input
      - '"s/L(.+);/$1/g"'